// O(n^1.5) O(1)
class Solution {
public:
    int countPrimes(int n) {
        int cnt = 0;
        for (int i = 2; i < n; ++i) {
            if (isPrime(i)) {
                ++cnt;
            }
        }
        return cnt;
    }
private:
    bool isPrime(int n) {
        if (n < 2) {
            return false;
        }
        for (int i = 2; i * i <= n; ++i) {
            if (!(n % i)) {
                return false;
            }
        }
        return true;
    }
};


// O(nlog(log(n))) O(n)
class Solution {
public:
    int countPrimes(int n) {
        vector<bool> isPrime(n, true);
        for (int i = 2; i * i < n; ++i) {
            if (!isPrime[i]) {
                continue;
            }
            for (int j = i * i; j < n; j += i) {
                isPrime[j] = false;
            }
        }
        
        int cnt = 0;
        for (int i = 2; i < n; ++i) {
            if (isPrime[i]) {
                ++cnt;
            }
        }
        return cnt;
    }
};
