// O(n) space
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        const int n = nums.size(); 
        vector<int> leftProduct(n, 1), rightProduct(n, 1);
        vector<int> ans(n, 0);
        
        for(int i = 1;i < n;++i)
            leftProduct[i] = leftProduct[i - 1] * nums[i - 1];
        
        for(int j = n - 2; j >= 0;--j)
            rightProduct[j] = rightProduct[j + 1] * nums[j + 1];
        
        for(int k = 0;k < n;++k)
            ans[k] = leftProduct[k] * rightProduct[k];
        
        return ans;
    }
};


// O(1) space
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        const int n = nums.size(); 
        vector<int> leftProduct(n, 1);
        
        for(int i = 1;i < n;++i)
            leftProduct[i] = leftProduct[i - 1] * nums[i - 1];
        
        int R = 1;
        for(int j = n - 1; j >= 0;--j) {
            leftProduct[j] = leftProduct[j] * R;
            R *= nums[j];
        }
        
        return leftProduct;
    }
};
