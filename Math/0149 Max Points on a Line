class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        if(points.empty())
            return 0;
        const int m = points.size();
        int ans = 0;
        
        for(int i = 0;i < m;++i) {
            int sameNum = 1, maxP = 0;
            map<pair<int, int>, int> cnt;   // slope -> points numbers
            for(int j = i + 1;j < m;++j) {
                // same points
                if(points[i][0] == points[j][0] && points[i][1] == points[j][1])
                    ++sameNum;
                else
                    maxP = max(maxP, ++cnt[getSlope(points[i], points[j])]);
            }
            ans = max(ans, maxP + sameNum);
        }
        
        return ans;
    }
private:
    // because of the precision of double, return pair
    pair<int, int> getSlope(vector<int>& p1, vector<int>& p2) {
        if(p1[0] == p2[0])  // vertical line
            return {p1[0], 0};
        if(p1[1] == p2[1])  // horizontal line
            return {0, p1[1]};
        
        int dy = p2[1] - p1[1], dx = p2[0] - p1[0];
        int d = gcd(dy, dx);
        return {dy / d, dx / d};
    }
    
    int gcd(int a, int b) {
        return b ? gcd(b, a % b) : a;
    }
};
