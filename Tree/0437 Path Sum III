/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// O(n^2)
class Solution {
    public int pathSum(TreeNode root, int sum) {
        if (root == null) {
            return 0;
        }
        // 如果不选根节点，共有left+right种；如果选了，共有findPath种
        int ans = 0;
        ans += findPath(root, sum);
        ans += pathSum(root.left, sum);
        ans += pathSum(root.right, sum);
        return ans;
    }
    
    // how many ways if we select cur node
    private int findPath(TreeNode node, int sum) {
        int res = 0;
        if (node == null) {
            return 0;
        }
        // cannot return here
        if (sum == node.val) {
            res += 1;
        }
        res += findPath(node.left, sum - node.val) + findPath(node.right, sum - node.val);
        return res;
    }
}


// O(n)
