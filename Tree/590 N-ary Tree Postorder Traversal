/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

// Recursive
class Solution {
public:
    vector<int> postorder(Node* root) {
        vector<int> ans;
        postorder(root, ans);
        return ans;
    }
private:
    void postorder(Node* root, vector<int>& ans) {
        if(!root) return;
        
        for(Node* n : root->children) {
            postorder(n, ans);
        }
        ans.push_back(root->val);
    }
};


// 迭代，后根遍历是左右根，反过来就是根右左，先访问根结点，左子树压栈，右子树压栈，最后逆置即可。
class Solution {
public:
    vector<int> postorder(Node* root) {
        if(!root) {
            return {};
        }
        
        deque<int> ans;
        stack<Node*> s;
        
        s.push(root);
        while(!s.empty()) {
            Node* cur = s.top();
            s.pop();
            
            ans.push_front(cur->val);
            for(auto it = cur->children.begin();it != cur->children.end();++it) {
                s.push(*it);
            }
        }
        
        return vector<int>(begin(ans), end(ans));
    }
};
