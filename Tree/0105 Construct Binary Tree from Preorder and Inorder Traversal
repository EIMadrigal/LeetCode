/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        return helper(pre, vin, 0, pre.size() - 1, 0, vin.size() - 1);
    }
private:
    TreeNode* helper(vector<int>& pre,vector<int>& vin, int preL, int preR, int vinL, int vinR) {
        if (preL > preR || vinL > vinR) {
            return nullptr;
        }
        TreeNode* node = new TreeNode(pre[preL]);
         
        int nodePos;
        for (nodePos = vinL; nodePos <= vinR; ++nodePos) {
            if (vin[nodePos] == pre[preL]) {
                break;
            }
        }
         
        node->left = helper(pre, vin, preL + 1, preL + nodePos - vinL, vinL, nodePos - 1);
        node->right = helper(pre, vin, preL + nodePos - vinL + 1, preR, nodePos + 1, vinR);
        return node;
    }
};
