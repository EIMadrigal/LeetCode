/*
// Definition for a Node.
class Node {
public:
    int val = NULL;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        if(!root) {
            return {};
        }
        
        vector<vector<int>> ans;
        queue<Node*> q;
        
        q.push(root);
        while(!q.empty()) {
            int size = q.size();
            vector<int> curLayer(size);
            for(int i = 0;i < size;++i) {
                Node* cur = q.front();
                q.pop();
                curLayer[i] = cur->val;
                for(int j = 0;j < cur->children.size();++j) {
                    q.push(cur->children[j]);
                }
            }
            ans.push_back(curLayer);
        }
        
        return ans;
    }
};


// space optimized
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        if(!root) {
            return {};
        }
        
        vector<vector<int>> ans;
        queue<Node*> q;
        int depth = 0;
        
        q.push(root);
        while(!q.empty()) {
            int size = q.size();
            ans.push_back({});
            while(size--) {
                Node* cur = q.front();
                q.pop();
                ans[depth].push_back(cur->val);
                for(Node* child : cur->children) {
                    q.push(child);
                }
            }
            ++depth;
        }
        
        return ans;
    }
};
