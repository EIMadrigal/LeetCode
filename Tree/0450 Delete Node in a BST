# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        # case 1: leaf node, just delete it  
        # case 2: just have one child, use child replace it
        # case 3: have two children, find its direct successor and let successor points to root's left
        #         let root's right replace root and delete original root
        
        if not root:
            return root
        
        if key == root.val:
            # case 1
            if not root.left and not root.right:
                del root
                return None
            
            # case 2
            if not root.left and root.right:
                tmp = root.right
                del root
                return tmp
            if root.left and not root.right:
                tmp = root.left
                del root
                return tmp
        
            # case 3
            successor = root.right
            
            while successor.left:
                successor = successor.left
            
            successor.left = root.left
            tmp = root.right
            del root
            return tmp
        
        if key < root.val:
            root.left = self.deleteNode(root.left, key)
        else:
            root.right = self.deleteNode(root.right, key)
        
        return root
