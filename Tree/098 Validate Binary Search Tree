// 一、左孩子的值总是比根小，右孩子值总是比根大，判断所有结点的值是否满足该条件
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return isValidBST(root, LONG_MIN, LONG_MAX);
    }
private:
    bool isValidBST(TreeNode* root, long down, long up) {
        if(!root) return true;
        
        if(root->val <= down || root->val >= up) return false;
        bool l = isValidBST(root->left, down, root->val);
        bool r = isValidBST(root->right, root->val, up);
        return l && r;
    }
};


// 二、LONG_MIN算是hard code，用空指针来表示无穷大
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return isValidBST(root, nullptr, nullptr);
    }
private:
    bool isValidBST(TreeNode* root, int* down, int* up) {
        if(!root) return true;
        
        if((down && root->val <= *down) || (up && root->val >= *up)) return false;
        bool l = isValidBST(root->left, down, &(root->val));
        bool r = isValidBST(root->right, &(root->val), up);
        return l && r;
    }
};

// 三、BST中序遍历有序
class Solution {
private:
    TreeNode* pre = nullptr;
public:
    bool isValidBST(TreeNode* root) {
        if(!root) return true;
        
        if(isValidBST(root->left) == false)
            return false;
        if(pre && root->val <= pre->val)
            return false;
        pre = root;
        return isValidBST(root->right);
    }
};
