/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
// dfs, update maxdepth timely
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        int ans = 0;
        dfs(root, 0, ans);
        return ans;
    }
private:
    void dfs(TreeNode* root, int depth, int& ans) {
        if(!root) {
            return;
        }
        
        if(depth == maxDepth) {
            ans += root->val;
        }
        else if(depth > maxDepth) {
            maxDepth = depth;
            ans = root->val;
        }
        
        dfs(root->left, depth + 1, ans);
        dfs(root->right, depth + 1, ans);
    }
    
    int maxDepth = 0;
};


// bfs, store one layer's sum
