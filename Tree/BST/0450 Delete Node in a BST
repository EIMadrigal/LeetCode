/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 # case 1: 没有左孩子, 右孩子顶替 
 # case 2: 没有右孩子, 左孩子顶替
 # case 3: 左右孩子都有, 左孩子接到右子树最左节点的左子树, 右子树顶替该节点
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (!root) return root;
        if (key < root->val) root->left = deleteNode(root->left, key);
        else if (key > root->val) root->right = deleteNode(root->right, key);
        else {
            if (!root->left) return root->right;
            if (!root->right) return root->left;
            TreeNode* leftMost = root->right;
            while (leftMost->left) {
                leftMost = leftMost->left;
            }
            leftMost->left = root->left;
            root = root->right;
        }
        return root;
    }
};
