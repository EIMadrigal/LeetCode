/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

// Recursive
class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> ans;
        preorder(root, ans);
        return ans;
    }
private:
    void preorder(Node* root, vector<int>& ans) {
        if(!root) {
            return;
        }
        
        ans.push_back(root->val);
        for(Node* child : root->children) {
            preorder(child, ans);
        }
    }
};


// 迭代，前序是根左右，所以要将孩子逆序压栈，这样出栈访问就是先左后右
class Solution {
public:
    vector<int> preorder(Node* root) {
        if(!root) {
            return {};
        }
        
        vector<int> ans;
        stack<Node*> s;
        
        s.push(root);
        while(!s.empty()) {
            Node* cur = s.top();
            s.pop();
            ans.push_back(cur->val);
            
            for(auto it = cur->children.rbegin();it != cur->children.rend();++it) {
                s.push(*it);
            }
        }
        
        return ans;
    }
};
