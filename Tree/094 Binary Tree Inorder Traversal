/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
// Recursive
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        inorderTraversal(root, ans);
        return ans;
    }
private:
    void inorderTraversal(TreeNode* root, vector<int>& ans) {
        if(!root) {
            return;
        }
        
        inorderTraversal(root->left, ans);
        ans.push_back(root->val);
        inorderTraversal(root->right, ans);
    }
};


// Iterative
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        TreeNode* p = root;
        stack<TreeNode*> s;
        vector<int> result;
        
        while(!s.empty() || p)
        {
            //找到左子树最下边，并且保存根节点
            if(p)
            {
                s.push(p);
                p = p->left;
            }
            
            //p为空时，需要出栈
            else
            {
                p = s.top();
                s.pop();
                result.push_back(p->val);
                //进入右子树
                p = p->right;
            }
        }
        
        return result;
    }
};
