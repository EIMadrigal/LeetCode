/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

//递归
class Solution {
private:
    void preorder(Node* root, vector<int>& pre) {
        if(!root) return;
        
        pre.push_back(root->val);
        for(int i = 0;i < root->children.size();i++) {
            preorder(root->children[i], pre);
        }
    }
public:
    vector<int> preorder(Node* root) {
        vector<int> ans;
        preorder(root, ans);
        return ans;
    }
};

//迭代，前序是根左右，所以要将孩子逆序压栈，这样出栈访问就是先左后右
class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> ans;
        if(!root)
            return ans;
        
        stack<Node*> s;
        Node* p = root;
        s.push(p);
        
        while(!s.empty()) {
            s.pop();
            ans.push_back(p->val);
            //将孩子逆序压栈
            for(int i = p->children.size() - 1; i >= 0;i--) {
                s.push(p->children[i]);
            }
            if(!s.empty())
                p = s.top();
        }
        
        return ans;
    }
};
