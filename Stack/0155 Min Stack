/**
要求在O(1)时间复杂度拿到栈的最小值。
法一：建立一个辅助栈，存放曾经遇到过的最小值；
法二：用一个变量curMin记录当前最小值，如果要入栈的元素小于等于curMin，先将curMin入栈，再更新curMin的值；
    弹出时，如果要弹出最小值，先pop()，再更新curMin为栈顶元素，弹出栈顶元素。
**/

class MinStack {
public:
    MinStack() {
        
    }
    
    void push(int val) {
        data_.push(val);
        if (min_.empty() || val <= min_.top()) {
            min_.push(val);
        }
    }
    
    void pop() {
        if (data_.top() == min_.top()) {
            min_.pop();
        }
        data_.pop();
    }
    
    int top() {
        return data_.top();
    }
    
    int getMin() {
        return min_.top();
    }
private:
    stack<int> data_;
    stack<int> min_;
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */


class MinStack {
public:
    MinStack() {
        
    }
    
    void push(int val) {
        if (val <= curMin) {
            s_.push(curMin);
            s_.push(val);
            curMin = val;
        }
        else {
            s_.push(val);
        }
    }
    
    void pop() {
        if (s_.top() == curMin) {
            s_.pop();
            curMin = s_.top();
            s_.pop();
        } else {
            s_.pop();
        }
    }
    
    int top() {
        return s_.top();
    }
    
    int getMin() {
        return curMin;
    }
private:
    stack<int> s_;
    int curMin = INT_MAX;
};
