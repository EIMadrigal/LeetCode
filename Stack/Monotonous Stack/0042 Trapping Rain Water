# 找右侧第一个比nums[i]大的作为右墙，左墙就是弹出当前元素cur后的栈顶元素
# 遇到右墙就清算其和左墙间所有的蓄水面积，i必然比cur大但是不一定比s.top()大所以取min
# 注意底部宽度不是i - cur而是i - s.top() - 1，比如[4,2,0,3,2,5]的最后一个宽度是4而非2

class Solution:
    def trap(self, height: List[int]) -> int:
        ans = 0
        stack = []
        for i, h in enumerate(height):
            while stack and h > height[stack[-1]]:
                cur_idx = stack.pop()
                if not stack:  # cur没有左墙
                    break
                
                width = i - stack[-1] - 1
                heigh = min(h, height[stack[-1]]) - height[cur_idx]
                ans += width * heigh
            stack.append(i)
        return ans
