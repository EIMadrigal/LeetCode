class MyStack {
private:
    queue<int> q;
    
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        q.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    /*出栈时将队列前面的若干个元素加到队列最后，弹出该元素*/
    int pop() {
        int size = q.size();
        for(int i = 0;i < size - 1;i++)
        {
            q.push(q.front());
            q.pop();
        }
        int elem = q.front();
        q.pop();
        
        return elem;
    }
    
    /** Get the top element. */
    /*基本同上，找到元素top返回后，将其重新加入队列最后*/
    int top() {
        int size = q.size();
        for(int i = 0;i < size - 1;i++)
        {
            q.push(q.front());
            q.pop();
        }
        int elem = q.front();
        q.push(elem);
        q.pop();
        
        return elem;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        if(q.empty())
            return true;
        else
            return false;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
