// 不能在dfs中判断单词是否在字典中
class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        set<string> ans;
        for (int i = 0; i < board.size(); ++i)
            for (int j = 0; j < board[0].size(); ++j) {
                string cur;
                vector<vector<bool>> vis(board.size(), vector<bool>(board[0].size(), false));
                if (dfs(i, j, vis, board, words, cur)) {
                    ans.insert(cur);
                }
            }
        
        return vector<string>(ans.begin(), ans.end());
    }
private:
    bool dfs(int i, int j, vector<vector<bool>>& vis, vector<vector<char>>& board, vector<string>& words, string& cur) {
        for (string word : words) {
            if (word.compare(cur) == 0) {
                return true;
            }
        }
        if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || vis[i][j]) {
            return false;
        }
        
        cur += board[i][j];
        vis[i][j] = true;
        if (dfs(i + 1, j, vis, board, words, cur) || dfs(i - 1, j, vis, board, words, cur) || dfs(i, j + 1, vis, board, words, cur) || dfs(i, j - 1, vis, board, words, cur)) {
            return true;
        }
        cur.pop_back();
        vis[i][j] = false;
        return false;
    }
};
// 这样的问题在于：
// a b
// c d
// ac和ab可能都是答案，但是ac结束返回true，下一次dfs就会从b开始而忽略ab这个答案，关键就在于||的短路特性


// 应该遍历字典中的每一个词，判断是否可以dfs得到，如果可以就加入答案
class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        set<string> ans;
        for (string word : words) {
            for (int i = 0; i < board.size(); ++i)
                for (int j = 0; j < board[0].size(); ++j) {
                    string cur;
                    vector<vector<bool>> vis(board.size(), vector<bool>(board[0].size(), false));
                    if (dfs(i, j, vis, board, word, cur)) {
                        ans.insert(word);
                    }
                }
        }
        
        return vector<string>(ans.begin(), ans.end());
    }
private:
    bool dfs(int i, int j, vector<vector<bool>>& vis, vector<vector<char>>& board, string& word, string& cur) {
        if (cur.compare(word) == 0) {
            return true;
        }
        if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || vis[i][j]) {
            return false;
        }
        
        cur += board[i][j];
        vis[i][j] = true;
        if (dfs(i + 1, j, vis, board, word, cur) || dfs(i - 1, j, vis, board, word, cur) || dfs(i, j + 1, vis, board, word, cur) || dfs(i, j - 1, vis, board, word, cur)) {
            return true;
        }
        cur.pop_back();
        vis[i][j] = false;
        return false;
    }
};
// 但是这样会TLE


// 所以最终的剪枝考虑用Trie：将所有单词加入Trie，搜索时如果Trie中没有以当前字母开头的单词，就提前终止
class Trie {
public:
    /** Initialize your data structure here. */
    Trie() : root(new trieNode()) {}
    
    ~Trie() {
        if(root)
            delete root;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        trieNode* node = root;
        for(const char c : word) {
            auto p = node->children.emplace(c, nullptr);
            if(p.second)
                p.first->second = new trieNode();  // key does not exist yet, replace nullptr with trieNode
            node = p.first->second;
        }
        node->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        const trieNode* node = find(word);
        return node && node->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        return find(prefix) != nullptr;
    }
private:
    struct trieNode {
        trieNode() : isWord(false) {}
        
        ~trieNode() {
            for(auto p : children)
                if(p.second)
                    delete p.second;
        }
        
        unordered_map<char, trieNode*> children;
        bool isWord;
    };
    
    const trieNode* find(string word) {
		const trieNode* node = root;
		for (const char c : word) {
			auto it = node->children.find(c);
			if (it == node->children.end())
				return nullptr;
			else
				node = it->second;
		}
		return node;
	}
    
    trieNode* root;
};

class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        set<string> ans;
        Trie *trie = new Trie();
        for (string word : words) {
            trie->insert(word);
        }
        
        string cur;
        vector<vector<bool>> vis(board.size(), vector<bool>(board[0].size(), false));
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[0].size(); ++j) {
                dfs(i, j, vis, board, trie, cur, ans);
            }
        }
        
        return vector<string>(ans.begin(), ans.end());
    }
private:
    void dfs(int i, int j, vector<vector<bool>>& vis, vector<vector<char>>& board, Trie *trie, string& cur, set<string>& ans) {
        if (trie->search(cur)) {
            ans.insert(cur);
        }
        if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || vis[i][j]) {
            return;
        }
        
        cur += board[i][j];
        vis[i][j] = true;
        if (trie->startsWith(cur)) {
            dfs(i + 1, j, vis, board, trie, cur, ans);
            dfs(i - 1, j, vis, board, trie, cur, ans);
            dfs(i, j + 1, vis, board, trie, cur, ans);
            dfs(i, j - 1, vis, board, trie, cur, ans);
        }
        cur.pop_back();
        vis[i][j] = false;
    }
};

