class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int row = board.size(), col = board[0].size();
        vector<vector<bool>> visited(row, vector<bool>(col, false));
        
        for(int i = 0;i < row;++i)
            for(int j = 0;j < col;++j) {
                if(dfs(board, word, visited, 0, i, j))
                    return true;
            }
        return false;
    }
private:
    bool dfs(vector<vector<char>>& board, const string& word, vector<vector<bool>>& visited, int len, int x, int y) {
        if(x < 0 || y < 0 || x >= board.size() || y >= board[0].size() || visited[x][y] || word[len] != board[x][y])
            return false;
        if(len == word.length() - 1)
            return word[len] == board[x][y];
        
        visited[x][y] = true;
        if(dfs(board, word, visited, len + 1, x, y + 1) || dfs(board, word, visited, len + 1, x - 1, y)
           || dfs(board, word, visited, len + 1, x + 1, y) || dfs(board, word, visited, len + 1, x, y - 1))
            return true;
        visited[x][y] = false;
        return false;
    }
};
