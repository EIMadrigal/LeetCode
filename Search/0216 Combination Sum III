class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        ans, path = [], []
        
        def backtrack(k, n, path_sum, start):
            if k == len(path):
                if path_sum == n:
                    ans.append(path[:])
                return
            
            for i in range(start, 10):
                path.append(i)
                backtrack(k, n, path_sum + i, i + 1)
                path.pop()
        backtrack(k, n, 0, 1)
        return ans


class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        ans, path = [], []
        
        def backtrack(k, n, path_sum, start):
            if path_sum > n:  # 剪枝1：当前路径长度大于n，没有必要继续向下递归，直接返回上一层
                return
            
            if k == len(path):
                if path_sum == n:
                    ans.append(path[:])
                return
            
            for i in range(start, 10):
                if k - len(path) > 9 - i + 1:  # 剪枝2：当前所需的元素个数大于可供选择的元素个数，没必要继续向右循环
                    break
                path.append(i)
                backtrack(k, n, path_sum + i, i + 1)
                path.pop()
        backtrack(k, n, 0, 1)
        return ans


// DFS
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> cur;
        dfs(k, n, 1, cur, ans);
        return ans;
    }
private:
    void dfs(int k, int n, int start, vector<int>& cur, vector<vector<int>>& ans) {
        if(!k) {
            if(!n) {
                ans.push_back(cur);
            }
            return;
        }
        
        // when depth++, k--, so we have to choose k nums from i, i+ 1, ... 9
        for(int i = start;i <= 10 - k;++i) {
            if(i > n) {
                return;
            }
            cur.push_back(i);
            dfs(k - 1, n - i, i + 1, cur, ans);
            cur.pop_back();
        }
    }
};


// bit
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        // i-th bit is 1 -> choose number i + 1
        vector<vector<int>> ans;
        
        for(int num = 0;num < 1 << 9;++num) {
            vector<int> cur;
            int sum = 0;
            for(int i = 0;i < 9;++i) {
                if(num >> i & 1) {
                    cur.push_back(i + 1);
                    sum += (i + 1);
                }
            }
            if(sum == n && cur.size() == k) {
                ans.push_back(cur);
            }
        }
        return ans;
    }
};
