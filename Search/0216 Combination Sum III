// DFS
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> cur;
        
        com(k, n, 1, cur, ans);
        
        return ans;
    }
private:
    void com(int k, int n, int start, vector<int>& cur, vector<vector<int>>& ans) {
        if(k == cur.size() && n == 0) {
            ans.push_back(cur);
            return;
        }
        
        for(int i = start;i < 10;++i) {
            cur.push_back(i);
            com(k, n - i, i + 1, cur, ans);
            cur.pop_back();
        }
    }
};


// bit
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        
        for(int s = 0;s < 1 << 9;++s) {
            vector<int> cur;
            int sum = 0;
            for(int i = 0;i < 9;++i)
                if(s & (1 << i)) {
                    sum += (i + 1);
                    cur.push_back(i + 1);
                }
            if(sum == n && cur.size() == k)
                ans.push_back(cur);
        }
        
        return ans;
    }
};
