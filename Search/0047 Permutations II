class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        vector<bool> used(n, false); // true if nums[i] is used
        vector<int> cur;
        
        std::sort(nums.begin(), nums.end());
        per(nums, used, cur, ans);
        return ans;
    }
private:
    void per(vector<int>& nums, vector<bool>& used, vector<int>& cur, vector<vector<int>>& ans) {
        if(cur.size() == nums.size()) {
            ans.push_back(cur);
            return;
        }
        
        for(int i = 0;i < nums.size();++i) {
            if(used[i])
                continue;
            // 2 circumstances if nums[i - 1] == nums[i]
			// 1: nums[i - 1] have not been used, backtrack to the same layer, they are going for the same pos, if use nums[i], it will repeat with nums[i - 1] on the same layer
			// 2: nums[i - 1] have used, nums[i - 1] is on the above layer of nums[i], they will be placed in different pos, it will not repeat
            if(i > 0 && nums[i - 1] == nums[i] && !used[i - 1])
                continue;
            used[i] = true;
            cur.push_back(nums[i]);
            per(nums, used, cur, ans);
            used[i] = false;
            cur.pop_back();
        }
    }
};
