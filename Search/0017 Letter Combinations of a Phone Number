class Solution:
    def __init__(self):
        self.cur = ''
        self.ans = []
        self.letter_map = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        self.backtrack(digits, 0)
        return self.ans
    
    def backtrack(self, digits, depth) -> None:
        if depth == len(digits):
            self.ans.append(self.cur)
            return
            
        letters = self.letter_map[digits[depth]]
        for letter in letters:
            self.cur = self.cur + letter
            self.backtrack(digits, depth + 1)
            self.cur = self.cur[:-1]


// DFS O(4^n)
class Solution {
public:
	vector<string> letterCombinations(string digits) {
		if (digits.empty())
			return {};

		vector<string> mapping = { "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
		vector<string> ans;
		string cur;

		dfs(digits, mapping, cur, 0, ans);

		return ans;
	}
private:
	void dfs(const string& digits, const vector<string>& mapping, string& cur, int len, vector<string>& ans) {
		if (len == digits.size()) {
			ans.push_back(cur);
			return;
		}

                for(const char c : mapping[digits[len] - '0']) {
			cur.push_back(c);
			dfs(digits, mapping, cur, len + 1, ans);
			cur.pop_back();
		}
	}
};


// BFS + 滚动数组
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if(digits.empty())
            return {};
        
        vector<string> mapping = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        vector<string> ans{""};
        for(int i = 0;i < digits.size();++i) {
            vector<string> tmp;
            for(auto s : ans)
                for(const char c : mapping[digits[i] - '0']) {
                    tmp.push_back(s + c);
                }
            ans.swap(tmp);
        }
        
        return ans;
    }
};
