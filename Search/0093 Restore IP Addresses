class Solution:
    def __init__(self):
        self.ans = []
        self.path = ""
    
    def restoreIpAddresses(self, s: str) -> List[str]:
        self.backtrack(s, 0, 0)
        return self.ans
        
    def backtrack(self, s: str, start: int, depth: int) -> None:  # 递归4层
        if depth == 3:
            if self.valid(s[start:]):  # 第4段是否合法
                self.ans.append(self.path[:] + s[start:])
            return
        
        for i in range(start, len(s)):
            tmp = s[start:i + 1]
            if not self.valid(tmp):
                break
            self.path = self.path + tmp + '.'
            self.backtrack(s, i + 1, depth + 1)
            self.path = self.path[:-(i - start + 2)]
        
    def valid(self, s: str) -> bool:
        if not s:
            return False
        if len(s) > 1 and s[0] == '0':
            return False
        if not 0 <= int(s) <= 255:
            return False
        return True
    

class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
        vector<int> cur;
        vector<string> ans;
        dfs(s, 0, 0, cur, ans);  // driver
        
        return ans;
    }
private:
    void dfs(string& s, int buildIndex, int seg, vector<int>& cur, vector<string>& ans) {
        if(seg == 4 && buildIndex == s.length()) {
            ans.push_back(to_string(cur[0]) + "." + to_string(cur[1]) + "." + to_string(cur[2]) + "." + to_string(cur[3]));
            return;
        }
        else if(seg == 4 || buildIndex == s.length())
            return;
        
        for(int len = 1;len < 4 && buildIndex + len <= s.length();++len) {
            string partial = s.substr(buildIndex, len);
            int n;
            stringstream ss;
            ss << partial;
            ss >> n;
            if(n > 255 || (len >= 2 && s[buildIndex] == '0'))
                break;
            cur.push_back(n);
            dfs(s, buildIndex + len, seg + 1, cur, ans);
            cur.pop_back();
        }
    }
};
