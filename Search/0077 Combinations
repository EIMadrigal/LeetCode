class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        res, path = [], []
        
        def backtrack(n, k, start):
            if k == len(path):
                res.append(path[:])  # slice returns a deep copy here, should not shallow copy res.append(path)
                return
            
            for i in range(start, n + 1):
                path.append(i)
                backtrack(n, k, i + 1)
                path.pop()
        
        backtrack(n, k, 1)
        return res
		

class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        res, path = [], []
        
        def backtrack(n, k, start):
            if k == len(path):
                res.append(path[:])  # slice returns a deep copy here, should not shallow copy res.append(path)
                return
            
            for i in range(start, n + 1):
                if k - len(path) > n - i + 1:  # 需要的元素个数大于可供选择的元素个数
                    break
                path.append(i)
                backtrack(n, k, i + 1)
                path.pop()
        
        backtrack(n, k, 1)
		
        return res


class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        vector<int> cur;
        vector<vector<int>> ans;
        
        com(n, k, 0, 1, cur, ans);
        
        return ans;
    }
private:
    void com(int n, int k, int d, int start, vector<int>& cur, vector<vector<int>>& ans) {
        if(d == k) {
            ans.push_back(cur);
            return;
        }
        
        for(int i = start; i <= n;++i) {
            cur.push_back(i);
            com(n, k, d + 1, i + 1, cur, ans);
            cur.pop_back();
        }
    }
};
