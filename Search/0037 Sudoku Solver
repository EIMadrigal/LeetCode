class Solution {
public:
	void solveSudoku(vector<vector<char>>& board) {
		solve(board);
	}

	bool solve(vector<vector<char>>& board) {    
		for (int row = 0; row < board.size(); ++row)
			for (int col = 0; col < board[0].size(); ++col) {
                if(board[row][col] != '.') continue;
				for (char num = '1'; num <= '9'; ++num) {    // options are 1-9
					if (noConflict(board, num, row, col)) {
						board[row][col] = num;   // try assign
						if (solve(board))
							return true;
						board[row][col] = '.';   // undo & try again
					}
				}
                return false;
            }

		return true;  // all locations successfully assigned
	}
private:
	bool noConflict(vector<vector<char>>& board, char num, int row, int col) {
		for (int i = 0; i < 9; ++i) {
			if (board[row][i] == num)
				return false;
			if (board[i][col] == num)
				return false;
            int j = 3 * (row / 3) + i / 3, k = 3 * (col / 3) + i % 3;
            if(board[j][k] == num)
                return false;
		}

		return true;
	}
};
