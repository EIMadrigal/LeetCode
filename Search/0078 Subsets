// dfs
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> cur;
        
        for(int i = 0;i <= nums.size();++i) {
            combi(nums, i, 0, cur, ans);
        }
        
        return ans;
    }
private:
    void combi(const vector<int>& nums, int n, int start, vector<int>& cur, vector<vector<int>>& ans) {
        if(n == cur.size()) {
            ans.push_back(cur);
            return;
        }
        
        for(int i = start;i < nums.size();++i) {
            cur.push_back(nums[i]);
            combi(nums, n, i + 1, cur, ans);
            cur.pop_back();
        }
    }
};

// binary
