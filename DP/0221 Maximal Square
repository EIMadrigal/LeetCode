// Space: O(mn)
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty())
            return 0;
        
        const int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        int ans = 0;
        
        for(int i = 1;i <= m;++i)
            for(int j = 1;j <= n;++j) {
                if(matrix[i - 1][j - 1] == '1') {
                    dp[i][j] = 1 + min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1]));
                    ans = max(ans, dp[i][j]);
                }
            }
        return ans * ans;
    }
};

// Space: O(n)
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty())
            return 0;
        
        const int m = matrix.size(), n = matrix[0].size();
        vector<int> dp(n + 1, 0);
        int pre = 0, ans = 0;
        
        // dp存储上一行的值
        for(int i = 1;i <= m;++i)
            for(int j = 1;j <= n;++j) {
                int tmp = dp[j];
                if(matrix[i - 1][j - 1] == '1') {
                    dp[j] = 1 + min(pre, min(dp[j], dp[j - 1]));
                    ans = max(ans, dp[j]);
                }
                else
                    dp[j] = 0;
                pre = tmp;
            }
        return ans * ans;
    }
};
