class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        
        def match(s, p):
            if p == '.' or s == p:
                return True
            return False
        
        m, n = len(s), len(p)
        dp = [[False] * (n + 1) for _ in range(m + 1)]
        
        dp[0][0] = True
        for j in range(1, n + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 2]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '*':
                    dp[i][j] = dp[i][j - 2] or (match(s[i - 1], p[j - 2]) and dp[i - 1][j])
                else:
                    dp[i][j] = match(s[i - 1], p[j - 1]) and dp[i - 1][j - 1]
        return dp[-1][-1]


class Solution {
    public boolean isMatch(String s, String p) {
        if (p.isEmpty()) return s.isEmpty();
        boolean first = !s.isEmpty() && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.');
        if (p.length() > 1 && p.charAt(1) == '*') {
            // *匹配0个或*匹配若干个
            return isMatch(s, p.substring(2)) || (first && isMatch(s.substring(1), p));
        }
        else { // 没有*
            return first && isMatch(s.substring(1), p.substring(1));
        }
    }
}
