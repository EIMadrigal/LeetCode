class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();
        vector<vector<long>> dp(m + 1, vector<long>(n + 1, 0));
        for(int i = 1;i < m + 1;++i) {
            if(obstacleGrid[i - 1][0] == 1)
                break;
            dp[i][1] = 1;
        }
        for(int i = 1;i < n + 1;++i) {
            if(obstacleGrid[0][i - 1] == 1)
                break;
            dp[1][i] = 1;
        }
        for(int i = 1;i <= m;++i)
            for(int j = 1;j <= n;++j) {
                if(i == 1 && j == 1)
                    continue;
                if(obstacleGrid[i - 1][j - 1] == 0)
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                else
                    dp[i][j] = 0;
            }
        
        return dp[m][n];
    }
};
