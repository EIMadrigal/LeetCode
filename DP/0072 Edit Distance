// if word1[i] == word2[j], dp(i, j) = dp(i - 1, j - 1)
// else we have 3 ops, dp(i, j) = 1 + min(dp(i - 1, j - 1), dp(i - 1, j), dp(i, j - 1))
// replace word1[i] word2[j]: dp(i, j) = 1 + dp(i - 1, j - 1)
// insert at word1[i] is the same as delete at word2[j]: dp(i, j) = 1 + dp(i - 1, j)
// insert at word2[j] is the same as delete at word1[i]: dp(i, j) = 1 + dp(i, j - 1)

class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[][] dp = new int[1 + m][1 + n];
        for (int i = 0; i <= m; ++i) {
            dp[i][0] = i;
        }
        for (int j = 0; j <= n; ++j) {
            dp[0][j] = j;
        }
        for (int i = 1; i <= m; ++i)
            for (int j = 1; j <= n; ++j) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
                else {
                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));
                }
            }
        return dp[m][n];
    }
}


// space optimization
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[] dp = new int[1 + n];
        for (int j = 0; j <= n; ++j) {
            dp[j] = j;
        }
        for (int i = 1; i <= m; ++i) {
            int pre = i - 1;
            dp[0] = i;
            for (int j = 1; j <= n; ++j) {
                int tmp = dp[j];
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[j] = pre;
                }
                else {
                    dp[j] = 1 + Math.min(dp[j - 1], Math.min(dp[j], pre));
                }
                pre = tmp;
            }
        }
        return dp[n];
    }
}
