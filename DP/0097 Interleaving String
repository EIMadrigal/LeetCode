class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n1 = s1.length(), n2 = s2.length(), n3 = s3.length();
        if (n1 + n2 != n3)
            return false;
        // s1的前i个与s2的前j个能否交错出s3的前i + j个
        vector<vector<bool>> dp(1 + n1, vector<bool>(1 + n2, false));
        dp[0][0] = true;
        for (int i = 1; i <= n1; ++i) {
            dp[i][0] = dp[i - 1][0] && s1[i - 1] == s3[i - 1];
        }
        for (int j = 1; j <= n2; ++j) {
            dp[0][j] = dp[0][j - 1] && s2[j - 1] == s3[j - 1];
        }
        for (int i = 1; i <= n1; ++i)
            for (int j = 1; j <= n2; ++j) {
                dp[i][j] = (s1[i - 1] == s3[i + j - 1] && dp[i - 1][j]) ||
                    (s2[j - 1] == s3[i + j - 1] && dp[i][j - 1]);
            }
        return dp[n1][n2];
    }
};


class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n1 = s1.length(), n2 = s2.length(), n3 = s3.length();
        if (n1 + n2 != n3)
            return false;
        // s1的前i个与s2的前j个能否交错出s3的前i + j个
        vector<bool> dp(1 + n2, false);
        dp[0] = true;
        for (int j = 1; j <= n2; ++j) {
            dp[j] = dp[j - 1] && s2[j - 1] == s3[j - 1];
        }
        
        for (int i = 1; i <= n1; ++i) {
            dp[0] = dp[0] && s1[i - 1] == s3[i - 1];
            for (int j = 1; j <= n2; ++j) {
                dp[j] = (s1[i - 1] == s3[i + j - 1] && dp[j]) || (s2[j - 1] == s3[i + j - 1] && dp[j - 1]);
            }
        }
        return dp[n2];
    }
};
