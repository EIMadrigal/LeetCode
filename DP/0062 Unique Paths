class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1 for j in range(n)] for i in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[m - 1][n - 1]


class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [1 for j in range(n)]
        for i in range(1, m):
            for j in range(1, n):
                dp[j] = dp[j] + dp[j - 1]
        return dp[n - 1]
		

# C(m + n - 2, m - 1)
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        numerator, denominator = 1, m - 1
        factor = m + n - 2
        while factor > n - 1:
            numerator *= factor
            factor -= 1
            while denominator > 1 and numerator % denominator == 0:
                numerator //= denominator
                denominator -= 1
        return numerator
