class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        # dp[i][j]表示前i个数容量为j时可以组合出的最大和
        # 希望将数组划分为和尽可能相等的两个子集
        # eg: sum=10, 希望找到尽量接近5的组合, 即容量为5, 假设找到的最大和为4, 
        # 即数组中能找到的最接近一半的组合的和是4，那么剩余部分就是sum - 4, 两部分相消得到sum - 4 - 4
        
        s = sum(stones)
        target = s // 2
        dp = [[0 for _ in range(target + 1)] for _ in range(1 + len(stones))]
        
        for i in range(1, 1 + len(stones)):
            for j in range(1, 1 + target):
                if stones[i - 1] > j:
                    dp[i][j] = dp[i - 1][j]
                else:
                    dp[i][j] = max(dp[i - 1][j], stones[i - 1] + dp[i - 1][j - stones[i - 1]])
        return s - dp[-1][-1] - dp[-1][-1]
        
        
class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        s = sum(stones)
        target = s // 2
        dp = [0 for _ in range(target + 1)]
        for i in range(1, len(stones) + 1):
            for j in range(target, 0, -1):
                if stones[i - 1] <= j:
                    dp[j] = max(dp[j], dp[j - stones[i - 1]] + stones[i - 1])
        return s - 2 * dp[-1]
