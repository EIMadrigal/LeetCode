class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        // change direc: out of bound || visited = true
        const int m = matrix.size();
        if(!m) {
            return {};
        }
        const int n = matrix[0].size();
        vector<int> ans, dx{0, 1, 0, -1}, dy{1, 0, -1, 0};
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int x = 0, y = 0, d = 0;
        
        for(int k = 0;k < m * n;++k) {
            ans.push_back(matrix[x][y]);
            visited[x][y] = true;  // marker
            int i = x + dx[d], j = y + dy[d];
            if(i < 0 || i >= m || j < 0 || j >= n || visited[i][j]) {
                d = (d + 1) % 4;
            }
            x = x + dx[d], y = y + dy[d];
        }
        return ans;
    }
};


// layer by layer
class Solution {
public:
    vector<int> printMatrix(vector<vector<int> > matrix) {
        int m = matrix.size();
        if (!m) {
            return {};
        }
        int n = matrix[0].size();
        
        vector<int> ans;
        // top left corner and bottom right corner of cur layer
        int r1 = 0, c1 = 0, r2 = m - 1, c2 = n - 1;
        while (r1 <= r2 && c1 <= c2) {
            for (int c = c1; c <= c2; ++c) {
                ans.push_back(matrix[r1][c]);
            }
            for (int r = r1 + 1; r <= r2; ++r) {
                ans.push_back(matrix[r][c2]);
            }
            if (r1 < r2 && c1 < c2) {
                for (int c = c2 - 1; c >= c1; --c) {
                    ans.push_back(matrix[r2][c]);
                }
                for (int r = r2 - 1; r > r1; --r) {
                    ans.push_back(matrix[r][c1]);
                }
            }
            ++r1;
            ++c1;
            --r2;
            --c2;
        }
        return ans;
    }
};
