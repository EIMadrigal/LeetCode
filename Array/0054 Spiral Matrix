class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        m, n = len(matrix), len(matrix[0])
        ans = []
        left, right, up, down = 0, n - 1, 0, m - 1
        while left <= right and up <= down:
            for x in range(left, right + 1):
                ans.append(matrix[up][x])
            for y in range(up + 1, down + 1):
                ans.append(matrix[y][right])
            if left < right and up < down:
                for x in range(right - 1, left - 1, -1):
                    ans.append(matrix[down][x])
                for y in range(down - 1, up, -1):
                    ans.append(matrix[y][left])
            left += 1
            right -= 1
            up += 1
            down -= 1
        return ans

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        // change direc: out of bound || visited = true
        const int m = matrix.size();
        if(!m) {
            return {};
        }
        const int n = matrix[0].size();
        vector<int> ans, dx{0, 1, 0, -1}, dy{1, 0, -1, 0};
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int x = 0, y = 0, d = 0;
        
        for(int k = 0;k < m * n;++k) {
            ans.push_back(matrix[x][y]);
            visited[x][y] = true;  // marker
            int i = x + dx[d], j = y + dy[d];
            if(i < 0 || i >= m || j < 0 || j >= n || visited[i][j]) {
                d = (d + 1) % 4;
            }
            x = x + dx[d], y = y + dy[d];
        }
        return ans;
    }
};


// 打印左上点A和右下点B构成的每层即可
vector<int> printMatrixSpiral(vector<vector<int>> &matrix) {
    vector<int> ans;
    int Arow = 0, Acol = 0, Brow = matrix.size() - 1, Bcol = matrix[0].size() - 1;
    while (Arow <= Brow && Acol <= Bcol) {
        for (int i = Acol; i <= Bcol; ++i) {
            ans.emplace_back(matrix[Arow][i]);
        }
        for (int i = Arow + 1; i <= Brow; ++i) {
            ans.emplace_back(matrix[i][Bcol]);
        }
        // 如果是单行或单列或中心则无需左转
        if (Arow < Brow && Acol < Bcol) {
            for (int i = Bcol - 1; i >= Acol; --i) {
                ans.emplace_back(matrix[Brow][i]);
            }
            for (int i = Brow - 1; i > Arow; --i) {
                ans.emplace_back(matrix[i][Acol]);
            }
        }
        ++Arow, ++Acol, --Brow, --Bcol;
    }
    return ans;
}
