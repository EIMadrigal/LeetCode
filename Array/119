https://leetcode.com/problems/pascals-triangle-ii/

My Solution:

Thought：
	该题让输出杨辉三角的特定行。
	1、分为奇数和偶数分别讨论，找到每行的规律，结果找错了；
	2、后来知道每一行就是多项式(x+y)^n的展开式系数：C(n,i)，这种组合的计算就要算阶乘。
	   写了一个求阶乘的函数，然后n=13就integer overflow了；
	3、还是按照118题的规则存储整个杨辉三角，然后输出特定行。
		
Code：
class Solution {
public:
    vector<int> getRow(int rowIndex)
	{
		vector<vector<int>> trian;
		vector<int> ans;
		
		ans.push_back(1);
		trian.push_back(ans);
		if (rowIndex == 0)
			return ans;

		ans.push_back(1);
		trian.push_back(ans);
		if (rowIndex == 1)
			return ans;

		for (int i = 2; i <= rowIndex; i++)
		{
			ans.clear();
			ans.push_back(1);
			for (int j = 1; j < i; j++)
			{
				ans.push_back(trian[i - 1][j] + trian[i - 1][j - 1]);
			}
			ans.push_back(1);
			trian.push_back(ans);
		}

		return trian[rowIndex];
    }
};

Performance:
	Runtime:4ms, beats 100%
	Memory:8.8MB, beats 14.22%
		
Superior Solution:

Thought：
	题目说要在O(k)的空间复杂度内完成。
	大佬的解法：C(n,m) = C(n,m-1) * (n - m + 1)/m.
		
Code：
class Solution {
public:
	vector<int> getRow(int rowIndex)
	{
		vector<int> ans(rowIndex + 1, 0);
		ans[0] = 1;
		for (int i = 1; i <= rowIndex; i++)
		{
			ans[i] = (long long)ans[i - 1] * (rowIndex - i + 1) / i;
		}
		return ans;
	}
};

Performance:
	Runtime:4ms, beats 100%
	Memory:8.4MB, beats 79.15%