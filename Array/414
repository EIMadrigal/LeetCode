https://leetcode.com/problems/third-maximum-number/

My Solution:

Thought：
	先排序，然后从大到小找到第三大的元素，找到即返回；
	否则返回最后一个。
		
Code：
class Solution {
public:
    int thirdMax(vector<int>& nums) {
        int len = nums.size();
		int flag = 1;
		sort(nums.begin(), nums.begin() + len);
		for (int i = len - 1; i > 0; i--)
		{
			if (nums[i] > nums[i - 1])
			{
				flag++;
			}
			if (flag == 3)
				return nums[i - 1];
		}
		return nums[len - 1]; 
    }
};

Performance:
	Runtime:8ms, beats 99.17%
	Memory:9.4MB, beats 37.90%
		
Superior Solution:

Thought：
	讨论区有人用set做：遍历vector，将元素插入到set中，这样就会自动去重且由小到大排序；
	一旦set中超过了3个元素，就删掉开头元素。
	最后判断set中是否有3个元素，若有，则返回set开头元素（最后两个一定是最大的）；
	若没有，说明输入去重后是1个或2个元素，返回最大的即可。
		
Code：
class Solution {
public:
	int thirdMax(vector<int>& nums)
	{
		set<int> top3;
		for (int num : nums)
		{
			top3.insert(num);
			if (top3.size() > 3)
				top3.erase(top3.begin());
		}

		return top3.size() == 3 ? *top3.begin() : *top3.rbegin();
	}
};

Performance:
	Runtime:12ms, beats 57.14%
	Memory:10.7MB, beats 25.80%
