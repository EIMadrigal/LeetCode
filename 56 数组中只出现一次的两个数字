#
# 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
#
# 
# @param array int整型一维数组 
# @return int整型一维数组
#
class Solution:
    def FindNumsAppearOnce(self, array: List[int]) -> List[int]:
        # 全部异或得到 1 ^ 4 ^ 1 ^ 6 = 4 ^ 6
        # 通过lowbit操作得到4和6的最右边的不同的一位
        # 按照该位将数组分为2组，4和6必然不同组，组内异或即可
        s = 0
        for num in array:
            s ^= num
        lowbit = s & (-s)
        ans = [0] * 2
        for num in array:
            if num & lowbit:
                ans[0] ^= num
            else:
                ans[1] ^= num
        ans.sort()
        return ans

一个数字出现了1次，其它均出现了3次，找出1次的数字
出现3次的数其所有位上1的数目模3必为0
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        vector<int> bits(32, 0);
        for (int num : nums) {
            for (int i = 0; i < 32; ++i) {
                bits[i] += num >> i & 1;
            }
        }

        int ans = 0;
        for (int i = 0; i < 32; ++i) {
            if (bits[i] % 3) {
                ans += 1 << i;
            }
        }
        return ans;
    }
};
