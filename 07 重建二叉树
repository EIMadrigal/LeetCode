/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> m;

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        // 快速查找根结点在inorder中的下标    
        for (int i = 0; i < inorder.size(); ++i) {
            m[inorder[i]] = i;
        }
        return buildTree(preorder, inorder, 0, inorder.size() - 1, 0);
    }

    // 需要知道inorder的起始和结束，根在preorder中的位置
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder, int in_l, int in_r, int pre_idx) {
        if (in_l > in_r) {
            return nullptr;
        }
        TreeNode* root = new TreeNode(preorder[pre_idx]);
        
        // int i;
        // for (i = in_l; i <= in_r; ++i) {
        //     if (preorder[pre_idx] == inorder[i])
        //         break;
        // }

        int i = m[preorder[pre_idx]];
        TreeNode* l = buildTree(preorder, inorder, in_l, i - 1, pre_idx + 1);
        TreeNode* r = buildTree(preorder, inorder, i + 1, in_r, pre_idx + 1 + (i - in_l));
        root->left = l, root->right = r;
        return root;
    }
};
