# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        dummy = pre_next_group = ListNode(next=head)
        left = right = dummy.next
        
        while True:
            cnt = 0
            while right and cnt < k:
                right = right.next
                cnt += 1
            
            if cnt == k:
                prev, cur = right, left
                # 标准的链表反转操作
                for _ in range(k):
                    tmp = cur.next
                    cur.next = prev
                    prev = cur
                    cur = tmp
                pre_next_group.next = prev
                pre_next_group = left
                left = right
            else:
                return dummy.next
