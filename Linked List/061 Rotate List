解法一：先遍历一遍拿到链表长度，然后让cur指针向后走len - k - 1步，将链尾连接到头即可。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head)
            return head;
        
        ListNode *cur = head, *last = head;
        int len = 0;
        
        while(cur)
        {
            len++;
            if(cur->next == nullptr)
            {
                last = cur;
            }
            cur = cur->next;
        }
        k = k % len;
        if(!k)
            return head;
        
        cur = head;
        for(int i = 0;i < len - k - 1;i++)
        {
            cur = cur->next;
        }
        
        last->next = head;
        head = cur->next;
        cur->next = nullptr;
            
        return head;
    }
};

解法二：双指针：快指针fast先走k步，然后fast和slow一起走，fast - slow = k，当fast走到链尾时，slow走到新链表的头一个结点，走了len - k个。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head)
            return head;
        
        ListNode *cur = head;
        int len = 0;
        while(cur)
        {
            len++;
            cur = cur->next;
        }
        k = k % len;
        
        ListNode *fast = head, *slow = head;
        for(int i = 0;i < k;i++)
        {
            fast = fast->next;
        }
        
        while(fast->next)
        {
            fast = fast->next;
            slow = slow->next;
        }
        
        //fast指向最后一个非空结点
        fast->next = head;
        head = slow->next;
        slow->next = nullptr;
        
        return head;
    }
};
