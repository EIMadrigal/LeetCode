# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = cur = ListNode(-1)
        carry = 0
        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            
            num, carry = (val1 + val2 + carry) % 10, (val1 + val2 + carry) // 10
            cur.next = ListNode(num)
            
            cur = cur.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return dummy.next


https://leetcode.com/problems/add-two-numbers/

My Solution:

Thought：
	处理好指针的移动和最后的进位。
		
Code：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans = new ListNode(-1);
        ListNode* cur = ans;
        int carry = 0;
        
        while(l1 || l2) {
            int n1 = l1 ? l1->val : 0;
            int n2 = l2 ? l2->val : 0;
            int sum = n1 + n2 + carry;
            carry = sum / 10;
            cur->next = new ListNode(sum % 10);
            cur = cur->next;
            if(l1) {
                l1 = l1->next;
            }
            if(l2) {
                l2 = l2->next;
            }
        }
        if(carry) {
            cur->next = new ListNode(carry);
        }
        
        return ans->next;
    }
};

Performance:
	Runtime:40ms, beats 96.39%
	Memory:19MB, beats 89.22%
		
Superior Solution:

Thought：
	讨论区有大佬只写了11行。
		
Code：
class Solution {
public:
	ListNode * addTwoNumbers(ListNode* l1, ListNode* l2)
	{
		ListNode preHead(0), *p = &preHead;
		int extra = 0;
		while (l1 || l2 || extra)
		{
			int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;
			extra = sum / 10;
			p->next = new ListNode(sum % 10);
			p = p->next;
			l1 = l1 ? l1->next : l1;
			l2 = l2 ? l2->next : l2;
		}
		return preHead.next;
	}
};
Performance:
	Runtime:40ms, beats 96.39%
	Memory:19.1MB, beats 74.65%
