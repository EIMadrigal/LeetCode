https://leetcode.com/problems/add-two-numbers/

My Solution:

Thought：
	处理好指针的移动和最后的进位。
		
Code：
class Solution {
public:
	ListNode * addTwoNumbers(ListNode* l1, ListNode* l2)
	{
		ListNode* ans = NULL, *prev = NULL;
		int carry = 0;
		while (l1 || l2)
		{
            		int tmp;
            		if(l1 && l2)
            		{
                		tmp = l1->val + l2->val + carry;
                		l1 = l1->next;
			    	l2 = l2->next;
            		}
            		else if(l1)
            		{
                		tmp = l1->val + carry;
                		l1 = l1->next;
            		}
            		else
            		{
                		tmp = l2->val + carry;
                		l2 = l2->next;
            		}
                
			ListNode* cur = new ListNode(tmp % 10);
			if(!ans)  //头结点
				ans = cur;
			if (prev)
				prev->next = cur;
			
            		prev = cur;   //prev指针向后移动
			carry = tmp / 10;
		}

        	if(carry)
        	{
            		ListNode* cur = new ListNode(carry);
            		prev->next = cur;
        	}

		return ans;
	}
};

Performance:
	Runtime:40ms, beats 96.39%
	Memory:19MB, beats 89.22%
		
Superior Solution:

Thought：
	讨论区有大佬只写了11行。
		
Code：
class Solution {
public:
	ListNode * addTwoNumbers(ListNode* l1, ListNode* l2)
	{
		ListNode preHead(0), *p = &preHead;
		int extra = 0;
		while (l1 || l2 || extra)
		{
			int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;
			extra = sum / 10;
			p->next = new ListNode(sum % 10);
			p = p->next;
			l1 = l1 ? l1->next : l1;
			l2 = l2 ? l2->next : l2;
		}
		return preHead.next;
	}
};
Performance:
	Runtime:40ms, beats 96.39%
	Memory:19.1MB, beats 74.65%
