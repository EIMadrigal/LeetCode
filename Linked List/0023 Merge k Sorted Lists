/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
// O(nlgk) O(k) 
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode dummy(-1);
        ListNode* cur = &dummy;
        
        // min heap
        auto cmp = [](ListNode* a, ListNode* b) { return a->val > b->val; };
        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp)> q(cmp);
        for (auto list : lists) {
            if (list)
                q.push(list);
        }
        
        while (!q.empty()) {
            cur->next = q.top();
            q.pop();
            cur = cur->next;
            if (cur->next)
                q.push(cur->next);
        }
        return dummy.next;
    }
};


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    // function object (functor)
    struct cmp {
        bool operator() (ListNode* a, ListNode* b) {
            return a->val > b->val;
        }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*, vector<ListNode*>, cmp> smallq;
        for (ListNode* node : lists) {
            if (node) {
                smallq.push(node);
            }
        }

        ListNode dummy(0);
        ListNode* cur = &dummy;
        while (!smallq.empty()) {
            ListNode* p = smallq.top(); smallq.pop();
            cur->next = p;
            cur = cur->next;
            if (p->next) {
                smallq.push(p->next);
            }
        }
        return dummy.next;
    }
};


// divide and conquer
// merge two lists cost O(n), will merge O(lgk) times, O(nlgk) O(lgk)
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return merge(lists, 0, lists.size() - 1);
    }
private:
    ListNode* merge(vector<ListNode*>& lists, int low, int high) {
        if (low > high) {
            return nullptr;
        }
        if (low == high) {
            return lists[low];
        }
        
        int mid = low + (high - low) / 2;
        ListNode* l = merge(lists, low, mid);
        ListNode* r = merge(lists, mid + 1, high);
        return mergeTwoLists(l, r);
    }
    
    ListNode* mergeTwoLists(ListNode* l, ListNode* r) {
        ListNode dummy(-1);
        ListNode* cur = &dummy;
        
        while (l && r) {
            if (l->val < r->val) {
                cur->next = l;
                l = l->next;
            }
            else {
                cur->next = r;
                r = r->next;
            }
            cur = cur->next;
        }
        
        cur->next = l ? l : r;
        return dummy.next;
    }
};
