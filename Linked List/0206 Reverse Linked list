Thought：
	iteratively.
	原地逆置：三步。
	1、保留cur的下一个结点；
	2、完成cur的逆置；
	3、为下个结点做准备。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (!head)
            return nullptr;
        
        ListNode* cur = head;
        while (cur->next) {
            ListNode* n = cur->next;
            cur->next = n->next;
            n->next = head;
            head = n;
        }
        return head;
    }
};


Thought：
	recursive.
	代码简洁但很难实现。

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (!head || !head->next)
            return head;
        
        ListNode* newHead = reverseList(head->next); // newHead->5->4->3->2->nullptr, head->1->2
        head->next->next = head;
        head->next = nullptr;
        return newHead;
    }
};
