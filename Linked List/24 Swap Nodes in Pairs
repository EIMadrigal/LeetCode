/**
题意是交换链表相邻两个结点，主要还是指针操作。
单链表的弊端就是不能快速访问某个结点的前一个结点，所以设置3个指针。
定义一个头结点以避免特殊情况判断，下面以-1->1->2->3->4为例：
第一次交换的结果是：-1->2->1->3->4，所以一共有三次指针变换：
1, 让pre->next指向second;
2, 让first->next指向second->next;
3, 让second->next指向first.
最后更新pre即可。
**/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode *dummy = new ListNode(-1);
        dummy->next = head;
        
        ListNode *pre = dummy;
        while(pre->next && pre->next->next)
        {
            ListNode *first = pre->next, *second = pre->next->next;
            pre->next = second;
            first->next = second->next;
            second->next = first;
            
            //update the pointers
            pre = first;
        }
        
        return dummy->next;
    }
};
