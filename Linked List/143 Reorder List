/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
private:
    ListNode *reverse(ListNode *h)
    {
        if(!h)
            return nullptr;
        
        ListNode *pre = nullptr;
        while(h)
        {
            ListNode *after = h->next;
            h->next = pre;
            pre = h;
            h = after;
        }
        
        return pre;
    }
public:
    void reorderList(ListNode* head) {
        if(!head || !(head->next))
            return ;
        
        ListNode *fast = head, *slow = head, *preSlow = head;
        
        while(fast && fast->next)
        {
            fast = fast->next->next;
            preSlow = slow;
            slow = slow->next;
        }
        preSlow->next = nullptr;
        ListNode *lastHalf = reverse(slow), *firstHalf = head, *tmp = nullptr;
        
        while(firstHalf && lastHalf)
        {
            ListNode *afterSec = lastHalf->next;
            lastHalf->next = firstHalf->next;
            firstHalf->next = lastHalf;
            
            tmp = lastHalf;
            firstHalf = lastHalf->next;
            lastHalf = afterSec;
        }
        
        if(lastHalf)
        {
            tmp->next = lastHalf;
        }
    }
};
