class LRUCache {
public:
    LRUCache(int capacity) : capacity_(capacity) {}
    
    int get(int key) {
        const auto it = m.find(key);
        if(it == m.cend())
            return -1;
        
        // move the key-value pair to the front of the list
        l.splice(l.begin(), l, it->second);
        
        return it->second->second;
    }
    
    void put(int key, int value) {
        const auto it = m.find(key);
        
        // key exists
        if(it != m.cend()) {
            it->second->second = value;   // update the value
            l.splice(l.begin(), l, it->second);
            return;
        }
        
        // capacity is reached, remove the oldest entry
        if(l.size() == capacity_) {
            m.erase(l.back().first);  // why we need the key in the pair
            l.pop_back();
        }
        
        l.emplace_front(key, value);
        m[key] = l.begin();
    }
private:
    int capacity_;
    unordered_map<int, list<pair<int, int>>::iterator> m;
    list<pair<int, int>> l;
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
