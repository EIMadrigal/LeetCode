二维线段树不会写 https://chengzhaoxi.xyz/42746.html ，先用二维树状数组

class BIT {
public:
    BIT(int m, int n) : prefix_sum_(m + 1, vector<int>(n + 1, 0)) {}

    void update(int i, int j, int delta) {
        for (int x = i; x < prefix_sum_.size(); x += lowbit(x))
            for (int y = j; y < prefix_sum_[0].size(); y += lowbit(y))
                prefix_sum_[x][y] += delta;
    }

    int query(int i, int j) {
        int ans = 0;
        for (int x = i; x > 0; x -= lowbit(x))
            for (int y = j; y > 0; y -= lowbit(y))
                ans += prefix_sum_[x][y];
        return ans;
    }

private:
    vector<vector<int>> prefix_sum_;  // 一维维护的是一个前缀和数组，二维维护一个前缀和矩阵
    static inline int lowbit(int x) {
        return x & (-x);
    }
};

class NumMatrix {
public:
    NumMatrix(vector<vector<int>>& matrix) : matrix_(matrix), tree_(matrix.size(), matrix[0].size()) {
        for (int i = 0; i < matrix.size(); ++i) {
            for (int j = 0; j < matrix[0].size(); ++j) {
                tree_.update(i + 1, j + 1, matrix[i][j]);
            }
        }
    }

    void update(int row, int col, int val) {
        tree_.update(row + 1, col + 1, val - matrix_[row][col]);
        matrix_[row][col] = val;
    }

    int sumRegion(int row1, int col1, int row2, int col2) {
        return tree_.query(row2 + 1, col2 + 1) + tree_.query(row1, col1) - tree_.query(row1, col2 + 1) - tree_.query(row2 + 1, col1);
    }
private:
    vector<vector<int>> matrix_;
    BIT tree_;
};

// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.update(1, 1, 10);
// numMatrix.sumRegion(1, 2, 3, 4);
