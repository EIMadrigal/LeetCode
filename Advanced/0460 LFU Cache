LFU和LRU的区别在于：优先删除访问频率最低的键值对，频率相同时优先删除LRU
删除操作的O(1)意味着要快速根据频率找到要删除的键值对，所以hashmap1存储freq -> doubly linked list
每个双向链表的组织和LRU一样，结点要存储(key, val, freq) 存储key是为了在hashmap2中删除对应的项，存储freq是为了get时更新访问频率并且移动到hashmap1合适的位置
get的O(1)需要hashmap2存储key -> 所有双向链表结点的映射

访问某项后其频率加一，如果删掉该项后当前min_freq的链表为空，意味着要更新min_freq，即接下来要干掉的是频率为min_freq的项

class Node:
    def __init__(self, key, val):
        self.key, self.val = key, val
        self.prev = self.next = None
        self.freq = 0

def init_linked_list():
    new, old = Node(0, 0), Node(0, 0)
    new.next, old.prev = old, new
    return (new, old)
        
class LFUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.min_freq = 0
        self.key_map = {}
        self.freq_map = collections.defaultdict(init_linked_list)

    def get(self, key: int) -> int:
        if key not in self.key_map:
            return -1
        node = self.key_map[key]
        self._increase(node)
        return node.val

    def put(self, key: int, value: int) -> None:
        if self.capacity == 0:
            return None
        
        if key in self.key_map:
            node = self.key_map[key]
            node.val = value
        else:
            node = Node(key, value)
            self.key_map[key] = node
        
        if len(self.key_map) > self.capacity:
            new, old = self.freq_map[self.min_freq]
            oldest = old.prev
            self._delete(oldest)
            del self.key_map[oldest.key]
        self._increase(node)
    
    def _increase(self, node):
        node.freq += 1
        if node.freq > 1:
            self._delete(node)
        self._add(node.freq, node)
        if node.freq == 1:
            self.min_freq = 1
        elif node.freq - 1 == self.min_freq:
            new, old = self.freq_map[self.min_freq]
            if new.next is old:
                self.min_freq = node.freq

    def _add(self, freq, node):
        new, old = self.freq_map[freq]
        nxt = new.next
        nxt.prev = new.next = node
        node.prev, node.next = new, nxt
        
    def _delete(self, node):
        prev, nxt = node.prev, node.next
        prev.next, nxt.prev = nxt, prev
        

# Your LFUCache object will be instantiated and called as such:
# obj = LFUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
