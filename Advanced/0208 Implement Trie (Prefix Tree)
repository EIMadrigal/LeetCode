// vector
class Trie {
public:
    /** Initialize your data structure here. */
    Trie() : root(new trieNode()) {}
    
    ~Trie() {
        if(root)
            delete root;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        trieNode* node = root;
        for(const char c : word) {
            if(!node->children[c - 'a'])
                node->children[c - 'a'] = new trieNode();
            node = node->children[c - 'a'];
        }
        node->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        const trieNode* node = find(word);
        return node && node->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        return find(prefix) != nullptr;
    }
private:
    struct trieNode {
        trieNode() : children(26, nullptr), isWord(false) {}
        
        ~trieNode() {
            for(auto child : children)
                if(child)
                    delete child;
        }
        
        vector<trieNode*> children;
        bool isWord;
    };
    
    const trieNode* find(string word) {
        const trieNode* node = root;
        for(const char c : word) {
            node = node->children[c - 'a'];
            if(!node)
                return nullptr;
        }
        return node;
    }
    
    trieNode* root;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
 
 
 // hashmap
 
