// straight-forward
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int ans = 0;
        uint32_t mask = 1;
        for(int i = 0;i < 32;++i) {
            if(mask & n)
                ++ans;
            mask <<= 1;
        }
        return ans;
    }
};


class Solution {
public:
    int hammingWeight(uint32_t n) {
        int ans = 0;
        while(n) {
            ++ans;
            n &= (n - 1);  // flip the least significant 1-bit in n to 0
        }
        return ans;
    }
};
