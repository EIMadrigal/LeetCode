class Solution {
    public int maximalRectangle(char[][] matrix) {
        /** 将每一行向下投影,变为
            10100
            20211
            31322
            40030
            然后对每一行调用84题
        */
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        int r = matrix.length, c = matrix[0].length;
        int[] h = new int[c];
        int ans = 0;
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                if (matrix[i][j] == '1') {
                    h[j] += 1;
                } else {
                    h[j] = 0;
                }
            }
            ans = Math.max(ans, largestRectangleArea(h));
        }
        return ans;
    }
    
    private int largestRectangleArea(int[] heights) {
        if (heights == null || heights.length == 0) {
            return 0;
        }
        
        int len = heights.length;
        int[] l = new int[len];
        l[0] = -1;
        for (int i = 1; i < len; ++i) {
            int p = i - 1;
            while (p >= 0 && heights[p] >= heights[i]) {
                p = l[p];
            }
            l[i] = p;
        }
        
        int[] r = new int[len];
        r[len - 1] = len;
        for (int i = len - 2; i >= 0; --i) {
            int p = i + 1;
            while (p < len && heights[p] >= heights[i]) {
                p = r[p];
            }
            r[i] = p;
        }
        
        int ans = 0;
        for (int i = 0; i < len; ++i) {
            ans = Math.max(ans, heights[i] * (r[i] - l[i] - 1));
        }
        return ans;
    }
}
