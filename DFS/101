https://leetcode.com/problems/symmetric-tree/

My Solution:

Thought：
	先判断左右子树：都为空就对称，不同时为空就不是；
	左右子树均不为空，判断值是否相等，若相等，递归判断子结点。
		
Code：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool symmetric_node(TreeNode* p, TreeNode* q)
	{
		if (!p || !q)
			return p == q;
        if (p->val != q->val)
			return false;
		return symmetric_node(p->left, q->right) && symmetric_node(p->right, q->left);
	}

	bool isSymmetric(TreeNode* root)
	{
		if (!root)
			return true;
		return symmetric_node(root->left, root->right);
	}
};
 
Performance:
	Runtime:8ms, beats 100%
	Memory:16.1MB, beats 19.32%
		
Superior Solution:
	递归解法无，非递归待更新。
