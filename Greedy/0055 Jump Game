// backtracking: start from the first pos, search for every pos it can go
// TLE, O(2^n) O(n)
class Solution {
    public boolean canJump(int[] nums) {
        return canJump(nums, 0);    
    }
    
    private boolean canJump(int[] nums, int cur) {
        if (cur == nums.length - 1) {
            return true;
        }
        for (int i = 1; i <= nums[cur]; ++i) {
            if (canJump(nums, cur + i)) {
                return true;
            }
        }
        return false;
    }
}


// Top-Down DP: memorize every index as good(can reach last) or bad
// O(n^2) O(n)
enum Index {
    GOOD, BAD, UNKNOWN
}

class Solution {
    
    Index[] memo;
    
    public boolean canJump(int[] nums) {
        memo = new Index[nums.length];
        for (int i = 0; i < nums.length; ++i) {
            memo[i] = Index.UNKNOWN;
        }
        memo[nums.length - 1] = Index.GOOD;
        return canJump(nums, 0);    
    }
    
    private boolean canJump(int[] nums, int cur) {
        if (cur == nums.length - 1) {
            return true;
        }
        if (memo[cur] != Index.UNKNOWN) {
            return memo[cur] == Index.GOOD ? true : false;
        }
        for (int i = 1; i <= nums[cur]; ++i) {
            if (canJump(nums, cur + i)) {
                memo[cur] = Index.GOOD;
                memo[cur + i] = Index.GOOD;
                return true;
            }
        }
        memo[cur] = Index.BAD;
        return false;
    }
}


// Bottom-Up DP
// O(n^2) O(n)
enum Index {
    GOOD, BAD, UNKNOWN
}

class Solution {
    
    Index[] memo;
    
    public boolean canJump(int[] nums) {
        memo = new Index[nums.length];
        for (int i = 0; i < nums.length; ++i) {
            memo[i] = Index.UNKNOWN;
        }
        memo[nums.length - 1] = Index.GOOD;
        for (int i = nums.length - 2; i >= 0; --i) {
            for (int j = i + 1; j <= i + nums[i] && j < nums.length; ++j) {
                if (memo[j] == Index.GOOD) {
                    memo[i] = Index.GOOD;
                    break;
                }
            }
        }
        return memo[0] == Index.GOOD;    
    }
}


// Greedy: we just need to keep track of the left-most GOOD pos, and decide if we can go to that pos
// O(n) O(1)
class Solution {
    public boolean canJump(int[] nums) {
        int lastGood = nums.length - 1;
        for (int i = nums.length - 2; i >= 0; --i) {
            if (i + nums[i] >= lastGood) {
                lastGood = i;
            }
        }
        return lastGood == 0;
    }
}
