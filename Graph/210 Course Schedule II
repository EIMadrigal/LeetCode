// 拓扑排序模板题
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        if(numCourses == 0) return {};
        
        // unknow(0) visiting(1) visited(2)
        vector<int> states(numCourses, 0);
        vector<int> ans;
        vector<vector<int>> graph(numCourses);
        
        // 邻接矩阵建图
        for(auto p : prerequisites) {
            graph[p[1]].push_back(p[0]);
        }
        
        for(int i = 0;i < numCourses;i++) {
            if(states[i] == 0) {
                if(dfs(graph, i, states, ans)) {   // 检测到环
                    return {};
                }
            }
        }
        
        reverse(ans.begin(), ans.end());
        
        return ans;
    }
private:
    bool dfs(vector<vector<int>>& graph, int cur, vector<int>& states, vector<int>& ans) {
        if(states[cur] == 1) return true;
        if(states[cur] == 2) return false;
        
        states[cur] = 1;
        for(auto neighbors : graph[cur]) {
            if(dfs(graph, neighbors, states, ans)) {
                return true;
            }
        }
        states[cur] = 2;
        ans.push_back(cur);
        
        return false;
    }
};
