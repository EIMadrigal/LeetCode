//第一遍找出所有的连通分量并记录面积，第二遍枚举所有的0，加上周围四个邻居的CC，取最大值。
class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        
        int row = grid.size(), col = grid[0].size();
        int id = 2;
        int ans = 0;
        unordered_map<int, int> areas;  //id to area
        
        for(int i = 0;i < row;i++)
            for(int j = 0;j < col;j++) {
                if(grid[i][j] == 1) {
                    areas[id] = areaCC(grid, row, col, i, j, id);
                    ans = max(ans, areas[id]);  //避免全1的情况
                    id++;
                }
            }
        
        for(int i = 0;i < row;i++)
            for(int j = 0;j < col;j++) {
                if(grid[i][j] == 0) {
                    int curArea = 1;
                    for(int id_ : set<int>{getId(grid, row, col, i - 1, j), getId(grid, row, col, i + 1, j),
                                           getId(grid, row, col, i, j - 1), getId(grid, row, col, i, j + 1)})
                        curArea += areas[id_];
                    ans = max(ans, curArea);
                }
            }
        
        return ans;
    }
private:
    int areaCC(vector<vector<int>>& grid, int row, int col, int y, int x, int id) {
        if(y < 0 || y >= row || x < 0 || x >= col || grid[y][x] != 1) return 0;
        
        grid[y][x] = id;
        return 1 + areaCC(grid, row, col, y - 1, x, id) + areaCC(grid, row, col, y + 1, x, id) 
                 + areaCC(grid, row, col, y, x - 1, id) + areaCC(grid, row, col, y, x + 1, id);
    }
    int getId(vector<vector<int>>& grid, int row, int col, int y, int x) {
        if(y < 0 || y >= row || x < 0 || x >= col || grid[y][x] <= 1) return 0;
        
        return grid[y][x];
    }
};
