class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        if(numCourses == 0 || prerequisites.empty()) return true;
        
        //邻接矩阵建图
        vector<vector<int>> graph(numCourses);
        for(auto p : prerequisites)
            graph[p[1]].push_back(p[0]);
        
        // state: unknow(0) visiting(1) visited(2)
        vector<int> state(numCourses, 0);
        for(int i = 0;i < numCourses;i++) {
            if(state[i] == 0) {
                if(dfs(graph, i, state) == true) //检测到环
                    return false;
            }
        }
        return true;
    }
private:
    bool dfs(vector<vector<int>>& graph, int cur, vector<int>& state) {
        if(state[cur] == 2) return false;
        if(state[cur] == 1) return true;
        
        state[cur] = 1;
        for(int neighbors : graph[cur]) {
            if(dfs(graph, neighbors, state))
                return true;
        }
        
        state[cur] = 2;
        return false;
    }
};
