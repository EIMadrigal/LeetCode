// dfs
class Solution {
public:
	vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
		vector<double> ans;
		unordered_map<string, unordered_map<string, double>> g;
		for (int i = 0; i < equations.size(); ++i) {
			g[equations[i][0]][equations[i][1]] = values[i];
			g[equations[i][1]][equations[i][0]] = 1 / values[i];
		}

		for (int i = 0; i < queries.size(); ++i) {
			if (g.find(queries[i][0]) == g.end() || g.find(queries[i][1]) == g.end())
				ans.push_back(-1.0);
			else if (queries[i][0] == queries[i][1])
				ans.push_back(1.0);
			else {
				unordered_set<string> visited;
				double quo = 1.0;
				if (dfs(g, visited, queries[i][0], queries[i][1], &quo))
					ans.push_back(quo);
				else
					ans.push_back(-1.0);
			}
		}

		return ans;
	}
private:
	bool dfs(unordered_map<string, unordered_map<string, double>>& g, unordered_set<string>& visited, string start, string end, double* quo) {
		if (visited.find(start) != visited.end() || start == end)
			return true;

		visited.insert(start);
		for (auto neighbor : g[start]) {
			if (visited.find(neighbor.first) != visited.end())
				continue;
			
			if (dfs(g, visited, neighbor.first, end, quo)) {
				(*quo) *= neighbor.second;
				return true;
			}
		}

		return false;
	}
};

// union find
class Solution {
public:
	vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
		// parents["A"] = {"B", 2.0} -> A = 2.0 * B
		// parents["B"] = {"C", 3.0} -> B = 3.0 * C
		unordered_map<string, pair<string, double>> parents;

		for (int i = 0; i < equations.size(); ++i) {
			const string& A = equations[i][0];
			const string& B = equations[i][1];
			const double k = values[i];
			
			if (!parents.count(A) && !parents.count(B)) {
				parents[A] = { B, k };
				parents[B] = { B, 1.0 };
			}
			else if (!parents.count(A)) {
				parents[A] = { B, k };
			}
			else if (!parents.count(B)) {
				parents[B] = { A, 1.0 / k };
			}
			else {
				auto& rA = find(A, parents);
				auto& rB = find(B, parents);
				if(rA.first != rB.first)
					parents[rA.first] = { rB.first, k * rB.second / rA.second };
			}
		}

		vector<double> ans;
		for (const auto& q : queries) {
			const string& X = q[0];
			const string& Y = q[1];
			if (!parents.count(X) || !parents.count(Y)) {
				ans.push_back(-1.0);
				continue;
			}
			auto& rX = find(X, parents); // {rX, X / rX}
			auto& rY = find(Y, parents); // {rY, Y / rY}
			if (rX.first != rY.first)
				ans.push_back(-1.0);
			else // X / Y = (X / rX / (Y / rY))
				ans.push_back(rX.second / rY.second);
		}
		return ans;
	}
private:
	pair<string, double>& find(const string& C, unordered_map<string, pair<string, double>>& parents) {
		if (C != parents[C].first) {
			const auto& p = find(parents[C].first, parents);
			parents[C].first = p.first;
			parents[C].second *= p.second;
		}
		return parents[C];
	}
};
