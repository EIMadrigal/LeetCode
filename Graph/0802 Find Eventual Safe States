// 一个node是unsafe：node是环的一部分或者node的neighbors形成环
class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        if(graph.empty()) return {};
        
        vector<states> state(graph.size(), UNKNOWN);
        vector<int> ans;
        
        for(int i = 0;i < graph.size();i++) {
            if(dfs(graph, i, state) == SAFE) {
                ans.push_back(i);
            }
        }
        
        return ans;
    }
private:
    enum states {UNKNOWN, VISITING, SAFE, UNSAFE};
    states dfs(vector<vector<int>>& graph, int cur, vector<states>& s) {
        if(s[cur] == VISITING) return UNSAFE;
        if(s[cur] != UNKNOWN) return s[cur];
        
        s[cur] = VISITING;
        for(auto neighbors : graph[cur]) {
            if(dfs(graph, neighbors, s) == UNSAFE) {
                s[cur] = UNSAFE;
                return UNSAFE;
            }
        }
        
        s[cur] = SAFE;
        
        return SAFE;
    }
};
