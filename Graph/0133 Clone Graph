/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;

    Node() {}

    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

//DFS
class Solution {
private:
    unordered_map<Node*, Node*> hash;  //original to cloned
public:
    Node* cloneGraph(Node* node) {
        if(!node) return nullptr;
        if(hash.count(node) > 0) return hash[node];
        
        Node* clone = new Node();
        clone->val = node->val;
        hash[node] = clone;
        for(auto n : node->neighbors) {
            clone->neighbors.push_back(cloneGraph(n));
        }
        return clone;
    }
};

//BFS
class Solution {
private:
    unordered_map<Node*, Node*> hash;
public:
    Node* cloneGraph(Node* node) {
        if(!node) return nullptr;
        queue<Node*> q;
        q.push(node);
        
        hash[node] = new Node(node->val, {});
        while(q.size()) {
            Node* f = q.front();
            q.pop();
           
            for(auto n : f->neighbors) {
                if(hash.count(n) == 0) {
                    hash[n] = new Node(n->val, {});
                    q.push(n);
                }
                hash[f]->neighbors.push_back(hash[n]);
            }
        }
        return hash[node];
    }
};
