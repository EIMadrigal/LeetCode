class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
        vector<int> ans(rains.size(), -1);
        
        unordered_map<int, int> fullLakes;  // lake id -> day id
        set<int> dryDays;
        
        for (int i = 0; i < rains.size(); ++i) {
            if (rains[i] == 0) {
                dryDays.insert(i);
                ans[i] = 1;
            } else {
                if (fullLakes.find(rains[i]) == fullLakes.end()) {
                    fullLakes[rains[i]] = i;
                } else {
                    int fullDay = fullLakes[rains[i]];
                    // notice dryDays.lower_bound is O(log n) but std::lower_bound() is O(n)
                    set<int>::iterator it = dryDays.lower_bound(fullDay);
                    if (it == dryDays.end()) {
                        return {};
                    }
                    ans[*it] = rains[fullDay];
                    fullLakes[rains[i]] = i;
                    dryDays.erase(it);
                }
            }
        }
        return ans;
    }
};


class Solution:
    def avoidFlood(self, rains: List[int]) -> List[int]:
        ans = [-1] * len(rains)
        dryDays = []
        fullLakes = dict()
        for i, lake in enumerate(rains):
            if lake == 0:
                ans[i] = 1
                dryDays.append(i)
            else:
                if lake not in fullLakes:
                    fullLakes[lake] = i
                else:
                    fullDay = fullLakes[lake]
                    dryDayIdx = bisect.bisect(dryDays, fullDay)
                    if dryDayIdx == len(dryDays):
                        return []
                    else:
                        ans[dryDays[dryDayIdx]] = lake
                        dryDays.pop(dryDayIdx)
                        fullLakes[lake] = i
        return ans
