class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
        vector<int> ans(rains.size(), -1);
        
        unordered_map<int, int> fullLakes;  // lake id -> day id
        set<int> dryDays;
        
        for (int i = 0; i < rains.size(); ++i) {
            if (rains[i] == 0) {
                dryDays.insert(i);
                ans[i] = 1;
            } else {
                if (fullLakes.find(rains[i]) == fullLakes.end()) {
                    fullLakes[rains[i]] = i;
                } else {
                    int fullDay = fullLakes[rains[i]];
                    // notice dryDays.lower_bound is O(log n) but std::lower_bound() is O(n)
                    set<int>::iterator it = dryDays.lower_bound(fullDay);
                    if (it == dryDays.end()) {
                        return {};
                    }
                    ans[*it] = rains[fullDay];
                    fullLakes[rains[i]] = i;
                    dryDays.erase(it);
                }
            }
        }
        return ans;
    }
};
