// Binary Search
/* 
  if n = 10, select mid = 5, count all nums which are <= mid
  if there are more than 5 nums <= 5, shrink to [1, 5]
*/
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int l = 1, r = nums.size();
        
        while(l < r) {
            int m = l + (r - l) / 2, cnt = 0;
            for(int num : nums) {
                if(num <= m)
                    ++cnt;
            }
            if(cnt > m)
                r = m;
            else
                l = m + 1;
        }
        return l;
    }
};


// similar to 142: find the node where the cycle begins
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = 0, fast = 0;
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while(slow != fast);
        
        slow = 0;
        while(slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};
