先用二分法（左闭右开）找到target的lower_bound。
	对于下界：
	1. target > nums[m]: l = m + 1
	2. target < nums[m]: r = m
	3. target == nums[m]: 如果m不是第一个target，那么要向左寻找，因此r = m；如果m是第一个target，此时如果继续令r = m，意味着
		接下来考虑的区间在第一个target左侧且不含第一个target，因此l必然会一直右移直到l == r == 第一个target

	对于上界，只需要返回lower_bound(target + 1) - 1即可
	
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if (nums.empty()) {
            return {-1, -1};
        }
        return {lowPos(nums, target), highPos(nums, target)};
    }
private:
    // lower bound
    int lowPos(vector<int>& nums, int target) {
        int l = 0, r = nums.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (target > nums[m]) {
                l = m + 1;
            }
            else {
                r = m;
            }
        }
        if (l < nums.size() && nums[l] == target) {
            return l;
        }
        return -1;
    }
    
    // upper bound
    int highPos(vector<int>& nums, int target) {
        int l = 0, r = nums.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (target >= nums[m]) {
                l = m + 1;
            }
            else {
                r = m;
            }
        }
        if (l > 0 && nums[l - 1] == target) {
            return l - 1;
        }
        return -1;
    }
};
