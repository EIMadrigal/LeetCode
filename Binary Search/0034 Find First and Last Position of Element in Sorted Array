class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int l = lowerBound(nums, target);
        if (l == nums.size() || nums[l] != target) {
            return {-1, -1};
        }
        int u = upperBound(nums, target);
        return {l, u - 1};
    }

    int lowerBound(vector<int>& nums, int target) {
        int l = 0, r = nums.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (target > nums[m]) {
                l = m + 1;
            }
            else {
                r = m;
            }
        }
        return l;
    }

    int upperBound(vector<int>& nums, int target) {
        int l = 0, r = nums.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (target >= nums[m]) {
                l = m + 1;
            }
            else {
                r = m;
            }
        }
        return l;
    }
};


先用二分法（左闭右开）找到target的lower_bound。
	对于下界：
	1. target > nums[m]: l = m + 1
	2. target < nums[m]: r = m
	3. target == nums[m]: 如果m不是第一个target，那么要向左寻找，因此r = m；如果m是第一个target，此时如果继续令r = m，意味着
		接下来考虑的区间在第一个target左侧且不含第一个target，因此l必然会一直右移直到l == r == 第一个target

	对于上界，只需要返回lower_bound(target + 1) - 1即可
	
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        low, high = self.lower_bound(nums, target), self.lower_bound(nums, target + 1) - 1
        if low < len(nums) and nums[low] == target:
            return [low, high]
        else:
            return [-1, -1]
        
    # find the smallest index which >= target
    def lower_bound(self, nums: List[int], target: int) -> int:
        l, r = 0, len(nums)
        while l < r:
            m = (l + r) // 2
            if target > nums[m]:
                l = m + 1
            else:
                r = m
        return l

	# find the smallest index which > target
	# 关键仍然在于target == nums[m]时l要尽可能地右移
	def upper_bound(self, nums: List[int], target: int) -> int:
 		l, r = 0, len(nums)
		while l < r:
			m = (l + r) // 2
			if target >= nums[m]:
				l = m + 1
			else:
				r = m
		return l
