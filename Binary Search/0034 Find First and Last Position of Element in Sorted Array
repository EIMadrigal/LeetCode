class Solution {
public:
	vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty())
            return {-1, -1};
		return { lowPos(nums, target), highPos(nums, target) };
	}
private:
	int lowPos(vector<int>& nums, int target) {
		int l = 0, r = nums.size() - 1;
		while (l <= r) {
			int m = l + (r - l) / 2;
			if (nums[m] >= target)
				r = m - 1;
			else
				l = m + 1;
		}
		if (l >= nums.size() || nums[l] != target)
			return -1;
		return l;
	}

	int highPos(vector<int>& nums, int target) {
		int l = 0, r = nums.size() - 1;
		while (l <= r) {
			int m = l + (r - l) / 2;
			if (nums[m] > target)
				r = m - 1;
			else
				l = m + 1;
		}
		if (r < 0 || nums[r] != target)
			return -1;
		return r;
	}
};
