class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if (nums.empty()) {
            return {-1, -1};
        }
        return {lowPos(nums, target), highPos(nums, target)};
    }
private:
    // lower bound
    int lowPos(vector<int>& nums, int target) {
        int l = 0, r = nums.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (target > nums[m]) {
                l = m + 1;
            }
            else {
                r = m;
            }
        }
        if (l < nums.size() && nums[l] == target) {
            return l;
        }
        return -1;
    }
    
    // upper bound
    int highPos(vector<int>& nums, int target) {
        int l = 0, r = nums.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (target >= nums[m]) {
                l = m + 1;
            }
            else {
                r = m;
            }
        }
        if (l > 0 && nums[l - 1] == target) {
            return l - 1;
        }
        return -1;
    }
};
